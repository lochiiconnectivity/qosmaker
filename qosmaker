#!/usr/bin/perl

#
#
#
#Generate MRTG configuration for cisco MQC
#df 07/02/05
#patch mcampos 20/11/08
#
#
#
$version = "1.17";
($router,$community,@opts) = @ARGV;

unless ($community) {
        print "$0 - version $version\n";
        print "Usage: $0 <router> <community> [-64(d)|-no64] [-drops(d)|-nodrops]\n";
        print "\n";
        print "Use just like mrtg cfgmaker, \n";
        print "\n";
        print "-64/-no64        Enable/Disable 64Bit counters (snmpv2),\n";
        print "                 Default is to enable them\n";
        print "\n";
        print "-drops/-nodrops  Enable/Disable Dropped Traffic Counting\n";
        print "                 Default is to enable it\n";
        print "\n";
        exit;
}

#Define defaults
#
#Default is to use 64 bit counters;
$snmpversion=":::::2";
#
#Default is to graph drops
undef($nodrops);
#
#

foreach (@opts) {
        if ($_=~m/-no64/) {
                $snmpversion="";
        }
        elsif ($_=~m/-nodrops/) {
                $nodrops="-nodrops";
        }
}

$date = `date`;
print "############# Configuration below generated by QoSMaker on $date\n\n";

#Generate a hash called %ifIndexResolve to convert ifIndex to ifDescr
#
$ifrestoifdescraw=`snmpwalk 2>/dev/null -v1 -c $community $router .1.3.6.1.2.1.2.2.1.2`;
@ifrestoifdescarray=split(/\n/,$ifrestoifdescraw);

foreach (@ifrestoifdescarray) {
        if ($_ =~ m/^(.*)\.(\d+) = STRING: (.*)$/) {
                my $ifID = $2;
                my $ifName = $3;
                $ifName=~s/'//g;
                $ifName=~s/"//g;
                $ifIndexResolve{$ifID}=$ifName;
        }
}


#Generate a hash called %classMapDecoder to convert classMap IDs to classMapDescrs
#

$classMapTableRaw=`snmpwalk 2>/dev/null -v1 -c $community $router .1.3.6.1.4.1.9.9.166.1.7.1.1.1`;
@classMapTableArray=split(/\n/,$classMapTableRaw);

foreach (@classMapTableArray) {

       if ($_ =~ m/^(.*)\.(\d+) = STRING: \"(.*)\"$/) {
                $classMapDecoder{$2}=$3;
        }
}


#Generate a hash called %polcyIDDecoder with policyID as key and ifDescr as value
#using ifIndexResolve to resolve
#
$poltointraw=`snmpwalk 2>/dev/null -v1 -c $community $router .1.3.6.1.4.1.9.9.166.1.1.1.1.4`;

@poltointarray=split(/\n/,$poltointraw);


foreach (@poltointarray) {
        if ($_ =~ m/^(.*)\.(\d+) = INTEGER: (\d+)$/) {
                $policyIDDecoder{$2}="$ifIndexResolve{$3}";
        }
}

#Generate a hash called %mappolIDtoClassMap to map policy ID to class map
#
#
$polToClassMapTableRaw=`snmpwalk 2>/dev/null -v1 -c $community $router .1.3.6.1.4.1.9.9.166.1.5.1.1.2`;
@polToClassMapTableArray=split(/\n/,$polToClassMapTableRaw);

foreach (@polToClassMapTableArray) {
       if ($_ =~ m/^(.*)\.(\d+)\.(\d+) = Gauge32: (\d+)$/) {
               my $tmpstr = "$2.$3";
               my $tmpval = $classMapDecoder{$4};
               if (($tmpval) && ($tmpval ne 'class-default')) {
                        $polToClassMapDecoder{$tmpstr}=$tmpval;
                }
        }
}

#Finally, produce an output for MRTG
#

foreach $key (sort keys %polToClassMapDecoder) {
        ($masterPolicyID,$subPolicyID) = split(/\./,$key);
        my $masterPolicyInterface=$policyIDDecoder{$masterPolicyID};
        my $masterPolicyName=$polToClassMapDecoder{$key};
        push (@{$unificationHash{$masterPolicyInterface}{$masterPolicyName}} ,$key);
}

foreach $key (sort keys %unificationHash) {
        foreach $subkey (sort keys %{$unificationHash{$key}}) {

                undef($mrtgtarget);
                undef($mrtgdropstarget);

                foreach (@{$unificationHash{$key}{$subkey}}) {
                        if ($no64) {
                                $mrtgtarget.=".1.3.6.1.4.1.9.9.166.1.15.1.1.9.$_&";
                        }
                        else {
                                $mrtgtarget.=".1.3.6.1.4.1.9.9.166.1.15.1.1.10.$_&";
                        }

                        unless ($nodrops) {
                                if ($no64) {
                                        $mrtgdropstarget.=".1.3.6.1.4.1.9.9.166.1.15.1.1.16.$_&";
                                }
                                else {
                                        $mrtgdropstarget.=".1.3.6.1.4.1.9.9.166.1.15.1.1.17.$_&";
                                }
                        }
                                
                }
                chop($mrtgtarget);
                chop($mrtgdropstarget) unless ($nodrops);

                my $interface=uc($key);
                $interface=~s/\//-/g;
		$interface=~s/\ /_/g;

                my $policy=uc($subkey);

                #If policy is unidirectional we must clone it in order to comply with MRTG
                unless ($mrtgtarget=~m/&/) {
                        $mrtgtarget="$mrtgtarget\&$mrtgtarget";
                }
                unless ($nodrops) {
                        unless ($mrtgdropstarget=~m/&/) {
                                $mrtgdropstarget="$mrtgdropstarget\&$mrtgdropstarget";
                        }
                }

                print <<EOM

Target[$policy($interface)]: $mrtgtarget:$community\@$router$snmpversion
MaxBytes[$policy($interface)]: 12500000
Title[$policy($interface)]: Traffic Analysis for $policy traffic on $interface
PageTop[$policy($interface)]: <H1>Traffic Analysis for $policy traffic on $interface</H1>
 <TABLE>
   <TR><TD>System:</TD><TD>CPE </TD></TR>
   <TR><TD>Maintainer:</TD><TD></TD></TR>
   <TR><TD>Interface:</TD><TD>$interface</TD></TR>
   <TR><TD>IP:</TD><TD>$policy($interface)</TD></TR>
   <TR><TD>Max Speed:</TD>
       <TD>12.5 MBytes/s (ethernetCsmacd)</TD></TR>
  </TABLE>
WithPeak[$policy($interface)]: ymd
Options[$policy($interface)]: growright, bits

EOM
;

                unless ($nodrops) {

                        print <<EOM2

Target[$policy-drops($interface)]: $mrtgdropstarget:$community\@$router$snmpversion
MaxBytes[$policy-drops($interface)]: 12500000
Title[$policy-drops($interface)]: Traffic Analysis for $policy dropped traffic on $interface
PageTop[$policy-drops($interface)]: <H1>Traffic Analysis for $policy dropped traffic on $interface</H1>
 <TABLE>
   <TR><TD>System:</TD><TD>CPE </TD></TR>
   <TR><TD>Maintainer:</TD><TD></TD></TR>
   <TR><TD>Interface:</TD><TD>$interface</TD></TR>
   <TR><TD>IP:</TD><TD>$policy-drops($interface)</TD></TR>
   <TR><TD>Max Speed:</TD>
       <TD>12.5 MBytes/s (ethernetCsmacd)</TD></TR>
  </TABLE>
WithPeak[$policy-drops($interface)]: ymd
Options[$policy-drops($interface)]: growright, bits

EOM2
;

                }

                }
        }


